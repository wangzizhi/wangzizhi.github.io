<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Css值和单位]]></title>
      <url>/2017/09/22/Css%E5%8D%95%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h1 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h1><p>css的所有工作大多都是基于单位的，这是影响所有属性的颜色、距离和大小的一种元素。</p>
<h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><p>单位总览：</p>
<table width="500"><br><tbody><tr><br><th scope="col">单位</th><br><th scope="col">解释</th><br></tr><br><tr><br><td>em</td><br><td>相对于父元素的字体大小</td><br></tr><br><tr><br><td>ex</td><br><td>相对于小写字母”x”的高度</td><br></tr><br><tr><br><td>gd</td><br><td>一般用在东亚字体排版上，这个与英文并无关系</td><br></tr><br><tr><br><td>rem</td><br><td>相对于根元素字体大小</td><br></tr><br><tr><br><td>vw</td><br><td>相对于视窗的宽度：视窗宽度是100vw</td><br></tr><br><tr><br><td>vh</td><br><td>相对于视窗的高度：视窗高度是100vh</td><br></tr><br><tr><br><td>vm</td><br><td>相对于视窗的宽度或高度，取决于哪个更小</td><br></tr><br><tr><br><td>ch</td><br><td>相对于0尺寸</td><br></tr><br><tr><br><td>px</td><br><td>相对于屏幕分辨率而不是视窗大小：通常为1个点或1/72英寸</td><br></tr><br><tr><br><td>in</td><br><td>inch, 表英寸</td><br></tr><br><tr><br><td>cm</td><br><td>centimeter, 表厘米</td><br></tr><br><tr><br><td>mm</td><br><td>millimeter, 表毫米</td><br></tr><br><tr><br><td>pt</td><br><td>1/72英寸</td><br></tr><br><tr><br><td>pc</td><br><td>12点活字，或1/12点</td><br></tr><br><tr><br><td>%</td><br><td>相对于父元素。正常情况下是通过属性定义自身或其他元素</td><br></tr><br></tbody></table>

<p>常用单位：</p>
<blockquote>
<ul>
<li>px:新手必备单位，用得最普遍的单位之一，属于绝对长度单位</li>
<li>%:学了些基础在考虑流式布局的时候用得较多，属于相对长度单位</li>
<li>em:弹性布局初期选择之一，属于相对长度单位</li>
<li>rem:弹性布局成熟选择之一，属于相对长度单位</li>
<li>vw、vh、vm:基于window.innerWidth/window.innerHeight的相对单位</li>
</ul>
</blockquote>
<h3 id="em-有坑"><a href="#em-有坑" class="headerlink" title="em (有坑)"></a>em (有坑)</h3><p>定义是相对于父元素的字体大小。但经过实践证明并非如此。<br>分为俩种情况讨论</p>
<blockquote>
<ol>
<li>字体大小：任何情况下字体大小也就是font-size与父元素是保持高度一致的，也就是1em就等于父元素的font-size。</li>
<li>非字体大小或者长度：具体有boder、width、height、padding、margin、line-height等属性的值,是根据子元素的font-size进行计算的，也就是这里的1em其实是等于子元素的font-size。<a href="https://codepen.io/zizhi/pen/aLmmGR" target="_blank" rel="external">例子</a></li>
</ol>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span>&gt;</div><div class="line">  &lt;span&gt;1&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">24px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">12px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">   <span class="attribute">border</span>:<span class="number">1em</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例子中border里的1em就是等于12px，而不是等于24px;这里还有一种理解，如果你没设置子元素的font-size时，其实em也是根据子元素的font-size计算的，因为这是子元素的font-size是继承于父元素的。</p>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>定义：相对于根元素html元素字体大小，这能给我们带来什么好处呢，就是我们在rem时只需要根据媒体查询便能轻松的改变整个页面的大小，实现弹性布局的效果。是比较好的弹性布局方案之一了</p>
<h3 id=""><a href="#" class="headerlink" title="%"></a>%</h3><p>百分比，在我们日常的代码写作中用的也比较多。<br>这里介绍个不常用的能用百分比单位的属性<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vertical-align:10%; //基于文本基线上浮10%个line-height高度</div></pre></td></tr></table></figure></p>
<h2 id="时间、频率、角度"><a href="#时间、频率、角度" class="headerlink" title="时间、频率、角度"></a>时间、频率、角度</h2><p>单位总览:</p>
<table>
<thead>
<tr>
<th>单位</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>deg</td>
<td>degrees, 角度</td>
</tr>
<tr>
<td>grad</td>
<td>grads, 百分度</td>
</tr>
<tr>
<td>rad</td>
<td>radians, 弧度</td>
</tr>
<tr>
<td>turn</td>
<td>turns, 圈数</td>
</tr>
<tr>
<td>ms</td>
<td>milliseconds, 毫秒数</td>
</tr>
<tr>
<td>s</td>
<td>seconds, 秒数</td>
</tr>
<tr>
<td>Hz</td>
<td>Hertz, 赫兹</td>
</tr>
<tr>
<td>kHz</td>
<td>kilohertz, 千赫</td>
</tr>
</tbody>
</table>
<p>这些单位多用于显示动画或者canvas和svg的绘图中用得较多</p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>16进制颜色、rgb颜色和hsl颜色，其中rgb颜色实际上和16进制颜色是近亲，只是进制的差异，都归属于rgb颜色。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ff80e1</span></div><div class="line">这里可以直接换算出来<span class="selector-tag">rgb</span>的颜色值</div><div class="line"><span class="selector-tag">rgb</span>(255,128,225);其中255是<span class="selector-tag">ff</span>换算出来的，128是80换算出来的，225是<span class="selector-tag">e1</span>换算出来的</div><div class="line"><span class="selector-tag">rgb</span>还可以用百分比进行标识</div><div class="line"><span class="selector-tag">rab</span>(100%,82%,88%);100%标识的色值为255.</div></pre></td></tr></table></figure>
<p>hsl颜色中“HSL”所表示的是“H:色相”，“S：饱和度”，“L：亮度”。色相是在色盘上的颜色，颜色的选择是使用饱和度：“0度是红色”，“120度为绿色”和“240度为蓝色”。hsl大多用于工业用色，我们相对用的较少。</p>
<p>hsl和rgb都衍生出了hsla和rgba<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">hsla</span>(200,30%,60%,<span class="selector-class">.8</span>);</div><div class="line"><span class="selector-tag">rgb</span>(255,128,225,<span class="selector-class">.8</span>);</div><div class="line">这里的最后一个数字代表的是透明度，值得范围在0<span class="selector-tag">-1</span>，1标识不透明，0标识完全透明</div></pre></td></tr></table></figure></p>
<p>transparent关键字，可以近似认为是rgba(0,0,0,0)。用这个关键字可以实现很多效果比如三角形 <a href="https://codepen.io/zizhi/pen/PjZNgZ" target="_blank" rel="external">例子</a></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上纯属个人观点，文章如有表述不准确,欢迎到[项目][5]中提ISSUE,也希望能给您的学习带来一丝帮助。</p>
]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Css基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css选择器]]></title>
      <url>/2017/09/20/css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>Css选择器 会用易用好则难</p>
<h1 id="Css选择器基础"><a href="#Css选择器基础" class="headerlink" title="Css选择器基础"></a>Css选择器基础</h1><p>选择器主要分为以下几类</p>
<blockquote>
<ul>
<li>元素选择器</li>
<li>类选择器</li>
<li>Id选择器</li>
<li>子类选择器</li>
<li>属性选择器</li>
<li>兄弟选择器</li>
<li>伪类和伪元素选择器</li>
</ul>
</blockquote>
<p>前面4类选择器使我们常用到的，相较而言与我们比较熟悉，这里我们变不再做过多赘述了。</p>
<p>后面3类选择器我们不常用到，但其实妙用大多来自这3类选择器中，尤其是伪类和伪元素选择器提供了相当强大的功能。下面就让我们来了解一下。</p>
<h2 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1.属性选择器 [ ]"></a>1.属性选择器 [ ]</h2><p>属性选择器是基于元素选择器、类选择器和Id选择器之上的，也就是说你不能直接定位到有这个属性的元素，而是需要指定哪一类文档元素有或者没有该属性。<br>代码示例<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">img[alt] &#123;border: 1px solid #333&#125; //找到拥有alt属性的图片元素，加边框</div><div class="line">p[class="info-p"] &#123;color: gray&#125;   //找到拥有类名为info-p的段落元素，将字体变为红色</div></pre></td></tr></table></figure></p>
<p>妙用场景：</p>
<blockquote>
<p> 基于Css的过滤搜索技术 <a href="http://www.zhangxinxu.com/wordpress/2013/09/css-attr-selector-search/" target="_blank" rel="external">详情&gt;&gt;</a></p>
</blockquote>
<h3 id="衍生出来‘部分属性选择器’"><a href="#衍生出来‘部分属性选择器’" class="headerlink" title="衍生出来‘部分属性选择器’"></a>衍生出来‘部分属性选择器’</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">img[alt~="info"] //找到拥有alt属性中包含'info'单词的图片元素 * 这里的'info'必须为整体不能为字符串的一部分 例如&lt;img alt="info-danger"/&gt;不能匹配得到，而&lt;img alt="info danger"/&gt;可以匹配得到</div><div class="line">img[alt^="info"] //找到拥有alt属性以'info'字符开头的图片元素</div><div class="line">img[alt$="info"] //找到拥有alt属性以'info'字符结束的图片元素</div><div class="line">img[alt*="info"] //找到拥有alt属性中包含'info'字符的图片元素 * 这里的'info'可以为字符串的一部分 例如 &lt;img alt="info-danger"/&gt;可以匹配得到</div></pre></td></tr></table></figure>
<h2 id="2-兄弟选择器"><a href="#2-兄弟选择器" class="headerlink" title="2.兄弟选择器"></a>2.兄弟选择器</h2><p>兄弟选择器由普通兄弟元素选择器(~)与相邻兄弟元素选择器(+)组成；都是选择第一个元素后面出现的兄弟元素。</p>
<h3 id="2-1普通兄弟选择器"><a href="#2-1普通兄弟选择器" class="headerlink" title="2.1普通兄弟选择器 ~"></a>2.1普通兄弟选择器 ~</h3><p>定义：选择紧接着一个原素后的<strong>所有</strong>指定元素，而且俩着拥有着相同的父级。<br>代码示例<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h1 ~ p &#123;font-size:24px;margin&#125; //选择紧接着在h1元素后面的所有p元素，h1和p拥有着相同的父级元素</div></pre></td></tr></table></figure></p>
<h3 id="2-2相邻兄弟选择器"><a href="#2-2相邻兄弟选择器" class="headerlink" title="2.2相邻兄弟选择器 +"></a>2.2相邻兄弟选择器 +</h3><p>定义：选择紧接着一个原素后的<strong>第一个</strong>指定元素，而且俩着拥有着相同的父级。<br>代码示例<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h1 + p &#123;font-size:24px;margin&#125; //选择紧接着在h1元素后面的第一个p元素，h1和p拥有着相同的父级元素</div></pre></td></tr></table></figure></p>
<p>应用场景<br>普通兄弟选择器：<br>默认字体为12px<br>要求是div下的第一个span的字体大小为12px,其余span的字体大小为24<br>代码示例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> ~ <span class="selector-tag">span</span>&#123;<span class="attribute">font-size</span>:<span class="number">24px</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="3-伪类和伪元素选择器-important"><a href="#3-伪类和伪元素选择器-important" class="headerlink" title="3 伪类和伪元素选择器  //!important"></a>3 伪类和伪元素选择器  //!important</h2><p>这里要着重区别下 伪类和伪元素</p>
<p>伪类：类似通常HTML中的类，但是它们不会直接以html标记的形式定义，而是一个动态的，满足一定条件时才会显示出来特定的效果。</p>
<p>伪元素：主要这里的用词是元素，虽然是不存在于dom树种，但其本质还是一种动态元素。</p>
<h3 id="3-1-伪类-important-and-important"><a href="#3-1-伪类-important-and-important" class="headerlink" title="3.1 伪类 //!important and !important"></a>3.1 伪类 //!important and !important</h3><p>伪类总集</p>
<table><br>    <thead><br>        <tr><br>            <th>例子</th><br>            <th>类别</th><br>            <th>解释</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td><br>                a:link</td><br>            <td><br>                链接(link)伪类</td><br>            <td><br>                选择一个用户没有访问过的链接</td><br>        </tr><br>        <tr><br>            <td><br>                a:visited</td><br>            <td><br>                链接(link)伪类</td><br>            <td><br>                选择一个用户访问过的链接</td><br>        </tr><br>        <tr><br>            <td><br>                a:hover</td><br>            <td><br>                行为性伪类</td><br>            <td><br>                选择一个用户将鼠标指针悬浮在上方的元素</td><br>        </tr><br>        <tr><br>            <td><br>                a:active</td><br>            <td><br>                行为性伪类</td><br>            <td><br>                选择一个用户使用中的元素</td><br>        </tr><br>        <tr><br>            <td><br>                a:focus</td><br>            <td><br>                行为性伪类</td><br>            <td><br>                选择一个拥有用户焦点的元素</td><br>        </tr><br>        <tr><br>            <td><br>                input:enabled</td><br>            <td><br>                状态性伪类</td><br>            <td><br>                选择一个处于可编辑状态(默认)下的元素</td><br>        </tr><br>        <tr><br>            <td><br>                input:disabled</td><br>            <td><br>                状态性伪类</td><br>            <td><br>                选择一个通过设置disabled属性而处于不可编辑状态下的元素</td><br>        </tr><br>        <tr><br>            <td><br>                input:checked</td><br>            <td><br>                状态性伪类</td><br>            <td><br>                选择一个被选中的单选或者复选按钮</td><br>        </tr><br>        <tr><br>            <td><br>                input:indeterminate</td><br>            <td><br>                状态性伪类</td><br>            <td><br>                选择一个处于不确定状态下的单选或者复选按钮(可能被选中或者不被选中)</td><br>        </tr><br>        <tr><br>            <td><br>                li:first-child</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择父元素下的第一个子元素</td><br>        </tr><br>        <tr><br>            <td><br>                li:last-child</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择父元素下的最后一个子元素</td><br>        </tr><br>        <tr><br>            <td><br>                div:only-child</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                如果某个元素是它父元素中惟一的子元素,那么将会被匹配</td><br>        </tr><br>        <tr><br>            <td><br>                p:first-of-type</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择父元素中同类型的第1个子元素</td><br>        </tr><br>        <tr><br>            <td><br>                p:last-of-type</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择父元素中同类型的最后一个子元素</td><br>        </tr><br>        <tr><br>            <td style="color:red"><br>                img:only-of-type</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                若元素为父元素中<strong>同类型的唯一元素<strong>，则会被匹配</strong></strong></td><br>        </tr><tr><td style="color:red"><br>                li:nth-child(2n+3)</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择以第3个子元素为开始，2为等差数向后递增的子元素中，如果该子元素为li元素则样式生效，不是li元素样式不会生效。即选中 3 5 7 9 11 … 中是li元素的子元素赋予样式</td><br>        </tr><tr><td style="color:red"><br>                li:nth-last-child(3n+2)</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择以倒数第二个子元素为开始，3为等差数向前递减的子元素中，如果该子元素为li元素样式生效，不是li元素样式不会生效</td><br>        </tr><tr><td style="color:red"><br>                p:nth-of-type(3n)</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择父元素下的所有p元素提取出来，以0为开始，3为等差数向后递增的p元素，对子元素的排序没有要求,即俩个p元素之间可以插入任意多个元素，不会影响最终效果</td><br>        </tr><tr><td style="color:red"><br>                p:nth-last-of-type(2n+1)</td><br>            <td><br>                结构性伪类</td><br>            <td><br>                选择父元素下的所有p元素提取出来，以倒数第一个p元素为开始，2为等差数向前递减的p元素，对子元素的排序没有要求，即俩个p元素之间可以插入任意多个元素，不会影响最终效果</td><br>        </tr><tr><td><br>                section:target</td><br>            <td><br>                目标伪类</td><br>            <td><br>                选择URI片段标示符的值指向的元素</td><br>        </tr><tr><td><br>                div:empty</td><br>            <td><br>                空伪类</td><br>            <td><br>                选择没有任何子元素或者文本的元素</td><br>        </tr><tr><td><br>                div:not(.awesome)</td><br>            <td><br>                否定伪类</td><br>            <td><br>                选择不匹配某个状态标示符的元素</td><br>        </tr><br>    </tbody><br></table>

<p>介绍几个常用的伪类</p>
<h4 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a>:first-child</h4><p>选择父元素下的第一个子元素<br>示例代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;<span class="attribute">font-size</span>:<span class="number">24px</span>&#125;</div></pre></td></tr></table></figure></p>
<p>注意一下这里选择的并不是第一ul下的第一个li,也不是所有ul下的第一个li,而是所有的ul下的第一个子元素为li的元素集合.</p>
<h4 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h4><p>选择父元素下的最后一个子元素<br>示例代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;<span class="attribute">font-size</span>:<span class="number">24px</span>&#125;</div></pre></td></tr></table></figure></p>
<p>同理这里选择的并不是第一ul下的最后一个li,也不是所有ul下的第一个li,而是选择的是所有的ul下的最后一个子元素为li的元素集合.</p>
<h4 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child"></a>:nth-child</h4><p>当父元素中子元素的序列匹配所给数字时会被选中，会以文档树开头作为起点，来计算所有元素<br>示例代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">table tr td:nth-child(odd)&#123;background:#fcfcfc&#125; //给表格奇数行加背景色</div><div class="line">table tr td:nth-child(2n+0)&#123;background:#fcfcfc&#125; //给表格偶数行加背景色</div><div class="line">table tr td:nth-child(2n+3)&#123;background:#fcfcfc&#125; //给表格3行为开始，2为等差的行数加背景色</div></pre></td></tr></table></figure></p>
<h4 id="nth-of-type"><a href="#nth-of-type" class="headerlink" title=":nth-of-type"></a>:nth-of-type</h4><p>选择父元素中指定类型的子元素按序列匹配<br>示例代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p:nth-of-type(3n) &#123;font-size:24px&#125; //选择父元素下的所有p元素提取出来，以0为开始，3为等差数向后递增的p元素，对子元素的排序没有要求,即俩个p元素之间可以插入任意多个元素，不会影响最终效果</div></pre></td></tr></table></figure></p>
<p>总结下</p>
<blockquote>
<ol>
<li>所有伪类中带child的，针对的是父元素下的<strong>所有</strong>子元素集进行排序,而所有伪类中带type的，针对的是父元素下的<strong>指定</strong>元素集进行排序</li>
<li>(2n+0)的表达式中 n旁边的数字代表等差数，+号左或者右的数字代表起始计算位置。</li>
<li>所有伪类选择的都是一个元素集，并不是单一元素，直选中单一元素只是应为你只有一个元素是满足选择条件的。 </li>
</ol>
</blockquote>
<h3 id="3-1-伪元素-important-and-important"><a href="#3-1-伪元素-important-and-important" class="headerlink" title="3.1 伪元素 //!important and !important"></a>3.1 伪元素 //!important and !important</h3><p>伪元素总集</p>
<p><table><thead><tr><th><br>                例子</th><br>            <th><br>                类别</th><br>            <th><br>                解释</th><br>        </tr></thead><tbody><tr><td><br>                .alpha:first-letter</td><br>            <td><br>                文本伪元素</td><br>            <td><br>                选择元素内文本的第一个字母</td><br>        </tr><tr><td><br>                .bravo:first-line</td><br>            <td><br>                文本伪元素</td><br>            <td><br>                选择元素内文本的第一行</td><br>        </tr><tr><td><br>                div:before</td><br>            <td><br>                生成的内容</td><br>            <td><br>                在被选择元素前创建伪元素</td><br>        </tr><tr><td><br>                a:after</td><br>            <td><br>                生成的内容</td><br>            <td><br>                在被选择元素末尾创建伪元素</td><br>        </tr><tr><td><br>                ::selection</td><br>            <td><br>                片段伪元素</td><br>            <td><br>                选择通过用户操作所选定或者高亮的部分</td><br>        </tr><br>    </tbody><br></table><br>介绍俩常用的伪元素</p>
<h4 id="before和-after-important-and-important-and-important"><a href="#before和-after-important-and-important-and-important" class="headerlink" title=":before和:after   //!important and !important and !important"></a>:before和:after   //!important and !important and !important</h4><p>before与:after生成内容伪元素向被选择的元素内部追加新的行内伪元素。这一类伪元素最普遍的用法，是配合content属性，向页面内添加一些不太重要的内容，但并不常常如此。伪元素不需要使用额外的元素标签，就可以向页面添加一些用户界面相关的内容。</p>
<p>这俩个伪元素常被我们用来实现一些特殊的效果</p>
<blockquote>
<ol>
<li>特殊形状的图形 <a href="https://codepen.io/zizhi/pen/OggxKW" target="_blank" rel="external">例子</a></li>
<li>字符animation loading效果 <a href="http://www.zhangxinxu.com/wordpress/2016/11/css-content-pre-animation-character-loading/" target="_blank" rel="external">例子</a></li>
<li>:after伪类+content内容生成经典应用举例 <a href="http://www.zhangxinxu.com/wordpress/2010/09/after%E4%BC%AA%E7%B1%BBcontent%E5%86%85%E5%AE%B9%E7%94%9F%E6%88%90%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/" target="_blank" rel="external">例子</a></li>
</ol>
</blockquote>
<h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>其实一个页面的结构一定程度上影响了写css时，对选择器的选择。建议先整体构思页面结构，找出如何才能更少，更简单地使用的css的选择器就能实现你想要的页面效果。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上纯属个人观点，文章如有表述不准确,欢迎到<a href="https://github.com/wangzizhi/wangzizhi.github.io/issues" target="_blank" rel="external">项目</a>中提ISSUE,也希望能给您的学习带来一丝帮助。</p>
]]></content>
      
        <categories>
            
            <category> Css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Css基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初出]]></title>
      <url>/2017/09/16/%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>第一个blog，记录下这一路</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活足迹 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[友情链接]]></title>
      <url>/friends/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
